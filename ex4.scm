(#%require schemeunit)

(define (btr-sum numeral1 numeral2)
  (btr-sum-carry numeral1 numeral2 #\0))

(define (btr-sum-carry numeral1 numeral2 carry)
  (let ((len1 (string-length numeral1))
        (len2 (string-length numeral2)))
    (cond ((> len1 len2) (btr-sum numeral1 (string-append "0" numeral2)))
          ((< len1 len2) (btr-sum (string-append "0" numeral1) numeral2))
          ((= len1 1) (let* ((digit1 (string-head numeral1))
                             (digit2 (string-head numeral2))
                             (carry-sum (btr-digit-sum digit1 digit2 carry)))
                        (btr-normalize (string (car carry-sum) (cdr carry-sum)))))
          (else (let* ((numeral1-lsd (string-ref numeral1 (- len1 1)))
                       (numeral2-lsd (string-ref numeral2 (- len2 1)))
                       (numeral1-rest (substring numeral1 0 (- len1 1)))
                       (numeral2-rest (substring numeral2 0 (- len2 1)))
                       (lsd-carry-sum (btr-digit-sum numeral1-lsd numeral2-lsd carry))
                       (head-sum (btr-sum-carry numeral1-rest numeral2-rest (car lsd-carry-sum))))
                  (btr-normalize (string-append head-sum (string (cdr lsd-carry-sum)))))))))

(define (btr-digit-sum digit1 digit2 carry)
  (let ((args (string digit1 digit2 carry)))
    (cond ((string=? args "---") (cons #\- #\0))
          ((string=? args "--0") (cons #\- #\+))
          ((string=? args "--+") (cons #\0 #\-))
          ((string=? args "-0-") (cons #\- #\+))
          ((string=? args "-00") (cons #\0 #\-))
          ((string=? args "-0+") (cons #\0 #\0))
          ((string=? args "-+-") (cons #\0 #\-))
          ((string=? args "-+0") (cons #\0 #\0))
          ((string=? args "-++") (cons #\0 #\+))
          ((string=? args "0--") (cons #\- #\+))
          ((string=? args "0-0") (cons #\0 #\-))
          ((string=? args "0-+") (cons #\0 #\0))
          ((string=? args "00-") (cons #\0 #\-))
          ((string=? args "000") (cons #\0 #\0))
          ((string=? args "00+") (cons #\0 #\+))
          ((string=? args "0+-") (cons #\0 #\0))
          ((string=? args "0+0") (cons #\0 #\+))
          ((string=? args "0++") (cons #\+ #\-))
          ((string=? args "+--") (cons #\0 #\-))
          ((string=? args "+-0") (cons #\0 #\0))
          ((string=? args "+-+") (cons #\0 #\+))
          ((string=? args "+0-") (cons #\0 #\0))
          ((string=? args "+00") (cons #\0 #\+))
          ((string=? args "+0+") (cons #\+ #\-))
          ((string=? args "++-") (cons #\0 #\+))
          ((string=? args "++0") (cons #\+ #\-))
          ((string=? args "+++") (cons #\+ #\0)))))

(define (btr->integer numeral)
  (let ((len (string-length numeral)))
    (if (= len 1)
        (btr-digit->integer (string-head numeral))
        (+ (* (btr->integer (substring numeral 0 (- len 1))) 3)
           (btr-digit->integer (string-ref numeral (- len 1)))))))

(define (btr-digit->integer digit)
  (case digit
    ((#\-) -1)
    ((#\0) 0)
    ((#\+) 1)))

(define (integer->btr number)
  (let ((q (quotient number 3)))
    (case (remainder number 3)
      ((-2) (string-append (if (= q 1) "" (integer->btr (- q 1))) "+"))
      ((-1) (string-append (if (= q 0) "" (integer->btr q)) "-"))
      ((0) (string-append (if (= q 0) "" (integer->btr q)) "0"))
      ((1) (string-append (if (= q 0) "" (integer->btr q)) "+"))
      ((2) (string-append (if (= q -1) "" (integer->btr (+ q 1))) "-")))))

(define (btr-normalize numeral)
  (if (or (= (string-length numeral) 1) (not (char=? (string-ref numeral 0) #\0)))
      numeral
      (btr-normalize (string-tail numeral))))

(define (string-head str)
  (string-ref str 0))

(define (string-tail str)
  (substring str 1 (string-length str)))

(check-equal? (btr-sum "-+--" "+") "-+-0")
(check-equal? (btr-sum "-+--" "-") "-0++")
(check-equal? (btr-sum "+-0+" "-+0-") "0")
(check-equal? (btr-sum "-+--+" "-0--") "--++0")
(check-equal? (btr-sum "-+-+0" "-0-+") "-0-0+")
(check-equal? (btr-sum "+-+-0" "+0+-") "+0+0-")

(do ((number1 -100 (+ number1 1)))
  ((> number1 100))
  (do ((number2 -100 (+ number2 2)))
    ((> number2 100))
    (let ((numeral1 (integer->btr number1))
          (numeral2 (integer->btr number2)))
      (check-equal? (btr->integer numeral1) number1)
      (check-equal? (btr->integer numeral2) number2)
      (check-equal? (btr->integer (btr-sum numeral1 numeral2)) (+ number1 number2)))))
